<style>
    .border-red {
        outline: solid 2px #A6192e;
    }
</style>

<MudCard Class="@($"cursor-pointer  {(Card.IsSelected ? "border-red" : "")}")"
         Outlined="true"
         Style="width: 160px; height: 144px;"
         @onmouseenter="() => Hovered = true"
         @onmouseleave="() => Hovered = false">

    <div style="position: relative; height: fit-content">
        <MudCardMedia Class="rounded-t" Image="@Card.FilePath" Height="100"/>

        <MudChip Class="position-absolute" T="string" Label="true" Size="Size.Small"
                 Style="color: white; background: rgba(0, 0, 0, .8); bottom: 36px; left: 110px;"><b>@Card.FileType</b>
        </MudChip>
        @if (Hovered || Card.IsSelected)
        {
            <MudToggleIconButton Class="pa-0 position-absolute z-10"
                                 ToggledChanged="ToggleSelection"
                                 Icon="@Icons.Material.Filled.RadioButtonUnchecked"
                                 Style="color: white; bottom: 100px; left: 80px;"
                                 ToggledIcon=@Icons.Material.Filled.CheckCircle
                                 ToggledColor="@Color.Error"
                                 Ripple="false"
                                 Size="Size.Large"/>
        }

    </div>
    
    <MudCardContent Class="pa-2">
        <MudText Class="mt-n7" Typo="Typo.body1">@Card.Title</MudText>
    </MudCardContent>
</MudCard>

@code {
    [Parameter] public Asset Card { get; set; } = default!;
    [Parameter] public EventCallback<Asset> OnSelected { get; set; }


    private bool Hovered { get; set; }

    private async Task ToggleSelection()
    {
        Card.IsSelected = !Card.IsSelected;
        await OnSelected.InvokeAsync(Card);
    }

}
